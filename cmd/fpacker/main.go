package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/ExperienceOne/apikit/framework"

	log "github.com/sirupsen/logrus"
)

func main() {

	var debug bool
	var src, dest, exclude, kind, env string
	flag.StringVar(&dest, "dest", "", "dest of autogenerated code")
	flag.StringVar(&src, "src", "", "src of framework")
	flag.StringVar(&exclude, "exclude", "", "list of dirs to exclude (sep by ,)")
	flag.StringVar(&kind, "kind", "", "part of framework")
	flag.StringVar(&env, "env", "", "environment")
	flag.BoolVar(&debug, "debug", false, "activate debug messages")
	flag.Parse()

	if debug {
		log.SetLevel(log.DebugLevel)
	}

	if dest == "" {
		log.Error("dest is missing")
		return
	}

	if src == "" {
		log.Error("src is missing")
		return
	}

	var excludedPackages []string
	if exclude != "" {
		excludedPackages = strings.Split(exclude, ",")
	}

	fw, err := framework.FromDirectory(src, excludedPackages)
	if err != nil {
		log.WithError(err).Error("error reading framework directory")
		return
	}

	code, err := fw.Bytes()
	if err != nil {
		log.WithError(err).Error("error getting framework code")
		return
	}

	log.Debug(string(code))

	var frameworkByteTpl = `
	package framework

	var %sCode []byte = []byte{ %v }`

	s := ""
	for _, c := range code {
		s += fmt.Sprintf("0x%02x,", c)
	}
	frameworkBytes := fmt.Sprintf(frameworkByteTpl, strings.Title(kind), s)

	if err := ioutil.WriteFile(dest, []byte(frameworkBytes), 0644); err != nil {
		log.WithError(err).Error("error persisting framework code")
		return
	}

	log.WithFields(log.Fields{"file": dest}).Info("framework successful written")
}
